==23656== Memcheck, a memory error detector
==23656== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==23656== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==23656== Command: ./lbsim cube.data
==23656== 
==23656== Invalid write of size 4
==23656==    at 0x40133A: initialiseFields(double*, double*, int*, unsigned int*) (initLB.cpp:20)
==23656==    by 0x404323: main (main.cpp:101)
==23656==  Address 0x5afa220 is 0 bytes after a block of size 212,992 alloc'd
==23656==    at 0x4C2FB55: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==23656==    by 0x4042FB: main (main.cpp:93)
==23656== 

valgrind: m_mallocfree.c:303 (get_bszB_as_is): Assertion 'bszB_lo == bszB_hi' failed.
valgrind: Heap block lo/hi size mismatch: lo = 213056, hi = 0.
This is probably caused by your program erroneously writing past the
end of a heap block and corrupting heap metadata.  If you fix any
invalid writes reported by Memcheck, this assertion failure will
probably go away.  Please try that before reporting this as a bug.


host stacktrace:
==23656==    at 0x38083F48: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x38084064: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x380841F1: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x38091A9C: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x3807D673: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x3807BF03: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x380800DA: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x3807B49A: ??? (in /usr/lib/valgrind/memcheck-amd64-linux)
==23656==    by 0x802DDD245: ???
==23656==    by 0x802CA9F2F: ???

sched status:
  running_tid=1

Thread 1: status = VgTs_Runnable (lwpid 23656)
==23656==    at 0x4013B4: initialiseFields(double*, double*, int*, unsigned int*) (initLB.cpp:44)
==23656==    by 0x404323: main (main.cpp:101)


Note: see also the FAQ in the source distribution.
It contains workarounds to several common problems.
In particular, if Valgrind aborted or crashed after
identifying problems in your program, there's a good chance
that fixing those problems will prevent Valgrind aborting or
crashing, especially if it happened in m_mallocfree.c.

If that doesn't help, please report this bug to: www.valgrind.org

In the bug report, send all the above text, the valgrind
version, and what OS and version you are using.  Thanks.

