#include "helper.h"
#include "visualLB.h"
#include "computeCellValues.h"
#include <stdio.h>
#include "LBDefinitions.h"
#include <math.h>


//Writes Density and Velocity from the collision field
void writeVtkOutput ( double * const collideField,
                      const char * filename,
                      unsigned int t,
                      int xlength ) {
/*
    int x = 0, y = 0, z = 0;
    int TotalLength = xlength + 2;

    char szFilename[80];
    FILE *fp = NULL;
    sprintf( szFilename, "%s.%i.vtk", filename, t );

    fp = fopen( szFilename, "w");
    if( fp == NULL ) {
        char szBuff[80];
        sprintf( szBuff, "Failed to open %s", filename );
        ERROR(szBuff);
        return;
    }

    write_vtkHeader( fp, xlength );

    write_vtkPointCoordinates(fp, xlength);

    fprintf(fp, "\nPOINT_DATA %i \n", xlength*xlength*xlength);


    double density = 0.0;
    double velocity[3] = {0.0};

    //Computing Density
    fprintf(fp, "SCALARS density float 1 \n");
    fprintf(fp, "LOOKUP_TABLE default \n");

    // DEBUGGING: chech computeDensity
    double* idx = 0;
    for ( z = 1; z <= xlength; ++z ) {
        for ( y = 1; y <= xlength; ++y ) {
            for ( x = 1; x <= xlength; ++x ) {

                idx = collideField + computeFieldIndex( x, y, z, TotalLength );
                computeDensity ( idx, &density );

                fprintf( fp, "%f\n", density );
            }
        }
    }


    //Computing Velocity
    fprintf(fp, "\nVECTORS velocity float \n");
    idx = 0;
    for ( z = 1; z <= xlength; ++z ) {
        for( y = 1; y <= xlength; ++y ) {
            for ( x = 1; x <= xlength; ++x ) {

                //idx1 = collideField + computeFlagIndex( x, y, z, xlength );
				idx = collideField + computeFieldIndex( x, y, z, TotalLength );

                computeDensity ( idx, &density);
                computeVelocity ( idx, &density, velocity);

#ifdef DEBUGGING
				if(density<0.9 || density>1.1)
					printf("x %d y %d z %d  %f   \n", x,y,z, density);
#endif

                fprintf(fp, "%f %f %f\n", velocity [0], velocity [1], velocity [2]);
            }
        }
    }
    fclose(fp);
    */
}


void write_vtkHeader( FILE *fp, int xlength ) {
/*
    if( fp == NULL )
    {
        char szBuff[80];
        sprintf( szBuff, "Null pointer in write_vtkHeader" );
        ERROR( szBuff );
        return;
    }

    fprintf(fp,"# vtk DataFile Version 2.0\n");
    fprintf(fp,"generated by CFD-lab course output \n");
    fprintf(fp,"ASCII\n");
    fprintf(fp,"\n");
    fprintf(fp,"DATASET STRUCTURED_GRID\n");
    fprintf(fp,"DIMENSIONS  %i %i %i \n", xlength, xlength, xlength);
    fprintf(fp,"POINTS %i float\n", xlength * xlength * xlength );
    fprintf(fp,"\n");
    */
}


void write_vtkPointCoordinates( FILE *fp, int xlength ){

/*
    for( int z = 1; z <= xlength; ++z )
        for( int y = 1; y <= xlength; ++y ) {
            for( int x = 1; x <= xlength; ++x ) {
              fprintf(fp, "%d %d %d\n", x, y, z );
        }
    }
*/
}
