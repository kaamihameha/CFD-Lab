#include "../helper.h"
#include "TESTvisual.h"
#include "../computeCellValues.h"
#include <stdio.h>
#include "../LBDefinitions.h"
#include <math.h>
#include <iostream>


//Writes Density and Velocity from the collision field
void writeVtkOutputTest ( double * const collideField,
                      const char * filename,
                      unsigned int t,
                      unsigned* Length ) {

    unsigned x = 0, y = 0, z = 0;
    unsigned TotalLength = ( Length[ 0 ] + 2 )
                         * ( Length[ 1 ] + 2 )
                         * ( Length[ 2 ] + 2 );

    char szFilename[80];
    FILE *fp = NULL;
    sprintf( szFilename, "%s.%i.vtk", filename, t );

    fp = fopen( szFilename, "w");
    if( fp == NULL ) {
        char szBuff[80];
        sprintf( szBuff, "Failed to open %s", filename );
        ERROR(szBuff);
        return;
    }

    write_vtkHeader( fp, Length );

    write_vtkPointCoordinates(fp, Length);


    double density = 0.0;
    double velocity[ 3 ] = {0.0};

    fprintf(fp, "\nPOINT_DATA %i", TotalLength );
    for ( unsigned Component = 0; Component < Vel_DOF; ++Component ) {

        writeComponent( fp,
                        Length,
                        collideField,
                        Component );
    }

    fclose(fp);

}


void write_vtkHeader( FILE *fp, unsigned* Length ) {

    if( fp == NULL )
    {
        char szBuff[80];
        sprintf( szBuff, "Null pointer in write_vtkHeader" );
        ERROR( szBuff );
        return;
    }

    unsigned TotalLength = ( Length[ 0 ] + 2 )
                         * ( Length[ 1 ] + 2 )
                         * ( Length[ 2 ] + 2 );

    fprintf(fp,"# vtk DataFile Version 2.0\n");
    fprintf(fp,"generated by CFD-lab course output \n");
    fprintf(fp,"ASCII\n");
    fprintf(fp,"\n");
    fprintf(fp,"DATASET STRUCTURED_GRID\n");
    fprintf(fp,"DIMENSIONS  %i %i %i \n", ( Length[ 0 ] + 2 ),
                                          ( Length[ 1 ] + 2 ),
                                          ( Length[ 2 ] + 2 ) );

    fprintf(fp,"POINTS %i float\n", TotalLength );
    fprintf(fp,"\n");
}


void write_vtkPointCoordinates( FILE *fp, unsigned* Length ){


    for( unsigned z = 0; z <= Length[0] + 1; ++z )
        for( unsigned y = 0; y <= Length[1] + 1; ++y ) {
            for( unsigned x = 0; x <= Length[2] + 1; ++x ) {
              fprintf(fp, "%d %d %d\n", x, y, z );
        }
    }
}



void writeComponent( FILE *fp,
                     unsigned* Length,
                     double * const Field,
                     unsigned Component ) {

    unsigned TotalLength = ( Length[ 0 ] + 2 )
                         * ( Length[ 1 ] + 2 )
                         * ( Length[ 2 ] + 2 );

    fprintf(fp, "\nSCALARS Component%d float 1 \n", Component);
    fprintf(fp, "LOOKUP_TABLE default \n");

    double Value = 0;
    for ( unsigned z = 0; z <= Length[ 2 ] + 1; ++z ) {
        for ( unsigned y = 0; y <= Length[ 1 ] + 1; ++y ) {
            for ( unsigned x = 0; x <= Length[ 0 ] + 1; ++x ) {

                Value = Field [computeFieldIndex( x, y, z, Length ) + Component ];

                fprintf( fp, "%f\n", Value );
            }
        }
    }

}
